<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.38">
  <POU Name="MAIN" Id="{02169f48-3937-45f7-92da-1b8b2105f78e}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	MC_Power1: MC_Power;
	MC_MoveAbsolute1: MC_MoveAbsolute;
	MC_ExtSetPointGenDisable1: MC_ExtSetPointGenDisable;
	MC_ExtSetPointGenEnable1: MC_ExtSetPointGenEnable;
	MC_Reset1: MC_Reset;
	MC_Power2: MC_Power;
	MC_MoveAbsolute2: MC_MoveAbsolute;
	axis1: AXIS_REF;				//NC轴变量
	axis2: AXIS_REF;				//NC轴变量
	status: INT;					//状态变量
//	MoveTime: LREAL := 0;			//两点间移动时间
	PlcCycleTime: LREAL := 0.01;	//PLC循环时间
	EachTime: LREAL := 2;			//距离曲线离散后,时间间隔T
	step: LREAL;					//单次移动距离
	ActGivenPosition: LREAL;		//实际给电机的坐标
	LastPosition: LREAL;			//上次实际给电机的坐标
	NextPosition AT%Q* : LREAL;			//要去的下一个给定距离
	GivenPosition AT%I* : LREAL;	//给定位置,C++输入给定位置
	CanGivenPosition AT%Q* : BOOL := FALSE;	//是否可以给定位置,输出给C++，还未做
	IsGivenPosition AT%I* : BOOL := FALSE;	//是否有给定位置,C++输入判定
	InitPosition: LREAL := 10;		//机械臂初始化位置
	
	//测试用变量
	testcount: INT;					//数组计数
	MyGivenPosition : ARRAY[0..10] OF LREAL;
	//测试用变量结束
					
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[MC_Power1(
	Axis:= axis1,
	Enable_Positive:= TRUE,
	Enable_Negative:= TRUE, );
	
MC_MoveAbsolute1(  //初始化位置
	Axis:= axis1, );
	
MC_ExtSetPointGenDisable1(
	Axis:= axis1, );
	
MC_ExtSetPointGenEnable1(
	Axis:= axis1, );
	
MC_Power2(
	Axis:= axis2,
	Enable_Positive:= TRUE,
	Enable_Negative:= TRUE, );
	
MC_MoveAbsolute2(  //初始化位置
	Axis:= axis2, );

CASE status OF
	0://init 初始化
		MC_Power1.Enable := FALSE;
		MC_ExtSetPointGenEnable1.Execute := FALSE;
		MC_ExtSetPointGenDisable1.Execute := FALSE;
		MC_MoveAbsolute1.Execute := FALSE;
		
		MC_Power2.Enable := FALSE;
		MC_MoveAbsolute2.Execute := FALSE;
		status := 1;
	1://power 使能
		MC_Power1.Enable := TRUE;
		MC_Power2.Enable := TRUE;
		IF MC_Power1.Status AND MC_Power2.Status THEN
			status := 2;
		END_IF
	2://move 移动到初始位置
		MC_MoveAbsolute1.Position := InitPosition;
		MC_MoveAbsolute1.Velocity := 2;
		MC_MoveAbsolute1.Execute := TRUE;
		MC_MoveAbsolute2.Position := 0;
		MC_MoveAbsolute2.Velocity := 1;
		MC_MoveAbsolute2.Execute := TRUE;
		IF MC_MoveAbsolute1.Done AND MC_MoveAbsolute2.Done THEN
			MC_MoveAbsolute1.Execute := FALSE;
			MC_MoveAbsolute2.Execute := FALSE;
			CanGivenPosition := TRUE;			//进入判断前一个时间,才将允许给定标志量变为真
			status := 3;
		END_IF
	3://等待变量输入,并计算单次移动距离
		IF IsGivenPosition THEN
			LastPosition := axis1.NcToPlc.ActPos;//读取当前位置作为上次给定位置
			//将一个离散时间常数内的移动距离，变换为单次plc循环的移动距离
		  	//错的 step := (GivenPositon - LastGivenPosition) * PlcCycleTime * EachTime;
			step := (GivenPosition - LastPosition) * PlcCycleTime / EachTime;
			//给定位置传送给下个位置变量
			NextPosition := GivenPosition;
			CanGivenPosition := TRUE;
			status := 4;
		END_IF
		//BREAK;
	4://按照外部给定运动，若完成当次移动后还有给定，则继续移动
		MC_ExtSetPointGenEnable1.Execute := TRUE;	//TODO：感觉可移到某个CASE里
		IF MC_ExtSetPointGenEnable1.Enabled THEN
			ActGivenPosition := LastPosition + step;//移动坐标为上次坐标加上单次移动距离
			LastPosition := ActGivenPosition;
			MC_ExtSetPointGenFeed(
				Position:= ActGivenPosition,		//给定距离
				Velocity:= 0, 						//速度和加速度可设为0，让plc自己计算
				Acceleration:= 0, 
				Direction:= 1, 
				Axis:= axis1);
		END_IF
		IF ABS(ActGivenPosition - NextPosition) <= 1E-10 THEN		//判定已经走到目标位置
			//IF判定想判定等于,但是有问题,两个认为相同的浮点数之间会有一个极小的误差存在，所以不应该判断相等
			//则判定两个的差的绝对值小于一次移动的距离的绝对值.
			//精度直接判定
			
			IF IsGivenPosition THEN			//判定还有没有给定位置，若有，则继续移动，若没有，则返回状态3等待
				step := (GivenPosition - LastPosition) * PlcCycleTime / EachTime;
				LastPosition := NextPosition;//记录上次给定位置
				NextPosition := GivenPosition;
				CanGivenPosition := TRUE;	//完成一次移动，并使用上次给定后，通知c++可以继续给定
			ELSE
				status := 3;				//返回状态3，等待位置给定
			END_IF
		ELSE
			IF IsGivenPosition THEN
				CanGivenPosition := FALSE;		//只要c++给定，就禁止再次给定
			END_IF
		END_IF
		
		
END_CASE
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>