///////////////////////////////////////////////////////////////////////////////
// GivePosition.h
#pragma once

#include "CppBetterMoveInterfaces.h"
#include "PID_Position.h"
#include "Elbow.h"
#include "kinematics.h"

class CGivePosition 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_CppBetterMoveCGivePosition)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CGivePosition();
	virtual	~CGivePosition();
	void UpdateInputs();		//更新c++输入
	void ElbowUpdateInputs();	//更新肘关节c++输入
	void UpdateOutputs();		//更新c++输出
	void ElbowUpdateOutputs();	//更新肘关节c++输出
	void shoulderRun();
	void shoulderSetAngle(double tarAngle[], int num);
	void shoulderSetPosition(double tarPosition[], int num);

	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;
	TcTraceLevel m_TraceLevelMax;
	GivePositionParameter m_Parameter;
	GivePositionInputs m_Inputs;
	GivePositionOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;

	// TODO: Custom variable
	//UINT m_counter;
	double timer;	//plc时间
	const double pi;

	/* elbow variables */
	//float angle;	//编码器角度
	//float radian;	//编码器角度转换弧度值
	double SetRad;	//弧度给定值
	double SetAngle;	//角度给定值
	//PID_Position PID4Elbow;
	Elbow elbow;

	/* shoulder variables */
	double MyCppPosition[2000];
	int PositionCount;			//位置数组数据移动到第几个坐标
	int PositionArraySize;		//位置数组有多少个坐标
	double shoulderMaxPos;
	/* shoulder test use */
	int counter;
	double testPosition1[5];
	double testPosition2[5];
	double testAngle1[5];
	double testAngle2[5];

	/* kinematics variables */
	double Ax;
	double Ay;
	double Aphi;
	double Ajoint[6];
	bool SetFlag;
};
