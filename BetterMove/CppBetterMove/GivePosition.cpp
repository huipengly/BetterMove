///////////////////////////////////////////////////////////////////////////////
// GivePosition.cpp
#include "TcPch.h"
#pragma hdrstop

#include "GivePosition.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CGivePosition
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CGivePosition
BEGIN_INTERFACE_MAP(CGivePosition)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CGivePosition)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CGivePosition)
IMPLEMENT_ITCADI(CGivePosition)
IMPLEMENT_ITCWATCHSOURCE(CGivePosition)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CGivePosition 
BEGIN_SETOBJPARA_MAP(CGivePosition)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_GivePositionParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CGivePosition 
BEGIN_GETOBJPARA_MAP(CGivePosition)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_GivePositionParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CGivePosition
BEGIN_OBJPARAWATCH_MAP(CGivePosition)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CGivePosition
BEGIN_OBJDATAAREA_MAP(CGivePosition)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_GivePositionInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_GivePositionOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CGivePosition::CGivePosition()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
	, Pi(3.14159f)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	for (int i = 0; i < 100; i++)
	{
		MyCppPosition[i] = 0;
	}
	float t1[5] = { 10.5, 9.5, 9.6, 9.9, 10.9 };
	float t2[5] = { 11.5, 10.8, 10.7, 10.3, 11.8 };
	for (int i = 0; i < 5; i++)
	{
		MyCppPosition[i] = t1[i];
		testPosition2[i] = t2[i];
	}
	PositionCount = 0;			//位置数组数据移动到第几个坐标
	PositionArraySize = 5;		//位置数组有多少个坐标
	time = 0;
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CGivePosition::~CGivePosition() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CGivePosition)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CGivePosition::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CGivePosition::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CGivePosition::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CGivePosition::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

//double MyCppPosition[100] = { 10.5, 9.5, 9.6, 9.9, 10.9, 11.5, 10.8, 10.7, 10.3, 11.8 };

//float MyCppPosition[100] = { 0 };
//float testPosition1[5] = { 10.5, 9.5, 9.6, 9.9, 10.9 };
//float testPosition2[5] = { 11.5, 10.8, 10.7, 10.3, 11.8 };
//int PositionCount = 0;			//位置数组数据移动到第几个坐标
//int PositionArraySize = 0;		//位置数组有多少个坐标
//double time = 0;

//double cycletime = 0.01;
HRESULT CGivePosition::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Replace the sample with your cyclic code

	////测试用 添加位置坐标
	//if (5 == PositionCount)
	//{
	//	time += 0.01;
	//	if (10 <= time)
	//	{
	//		//11.5, 10.8, 10.7, 10.3, 11.8
	//		MyCppPosition[PositionArraySize] = 11.5;
	//		PositionArraySize++;
	//		MyCppPosition[PositionArraySize] = 10.8;
	//		PositionArraySize++;
	//		MyCppPosition[PositionArraySize] = 10.7;
	//		PositionArraySize++;
	//		MyCppPosition[PositionArraySize] = 10.3;
	//		PositionArraySize++;
	//		MyCppPosition[PositionArraySize] = 11.8;
	//		PositionArraySize++;
	//	}
	//}
	////测试用结束

	timer = m_Inputs.PlcTimer;
	if (timer > 2)
	{
		//if (0 == PositionCount)
		//{
		//	shoulderGive(testPosition1, 5);
		//}
		if (5 == PositionCount)
		{
			time += 0.01;
			if (10 <= time)
			{
				//11.5, 10.8, 10.7, 10.3, 11.8
				shoulderGive(testPosition2, 5);
			}
		}
		shoulder();
	}

	//函数块，使电机按照给定值移动。
	//{
	//	if (PositionCount < PositionArraySize)	//没有走完已有坐标，则继续移动
	//	{

	//		if (m_Inputs.CanGivenPosition)		//可以给定坐标
	//		{
	//			m_Outputs.GivenPosition = MyCppPosition[PositionCount];	//将坐标传给plc
	//			m_Outputs.IsGivenPositon = TRUE;						//c++给定了坐标
	//		}
	//	}


	//	if ((m_Outputs.IsGivenPositon) && (MyCppPosition[PositionCount] == m_Inputs.NextPosition))
	//		//当NextPosition已经记录了给定坐标时，认为可以继续给定，将IsGivenPositon设为假
	//	{
	//		m_Outputs.IsGivenPositon = FALSE;	//上一次给定坐标已被PLC记录，认为c++未给定下一个坐标，可以继续给定
	//		++PositionCount;					//将c++坐标移动到下一个
	//	}
	//}
	//函数块，使电机按照给定值移动结束。

	//肘关节
	//UpdateInputs();
	//if (timer > 2)
	//{
	//	SetRad = static_cast<float>(0.40 * sin_(2 * Pi*0.05*(timer - 2) + 1.5*Pi) + 0.48);
	//	//SetRad = 0.4;

	//	elbow.SetTargetRad(SetRad);

	//	elbow.run();

	//	UpdateOutputs();
	//}

	return hr;
}


void CGivePosition::UpdateInputs()
{
	//elbow.GetAngle(m_Inputs.Angle - 270);//不受力状态时，角度为270，减去，角度会增大//旧的肘

	elbow.GetAngle(350 - m_Inputs.Angle);//不受力状态时，角度为350，减去，角度会减少//新的肘
	timer = m_Inputs.PlcTimer;

}

void CGivePosition::UpdateOutputs()
{
	//电压转换为（0-10V）->（0-32767）
	m_Outputs.m1Int = static_cast<int>(elbow.ShowM1() / 10 * 32767);
	m_Outputs.m2Int = static_cast<int>(elbow.ShowM2() / 10 * 32767);

	m_Outputs.rad = elbow.ShowRad();
	m_Outputs.tarrad = SetRad;
	m_Outputs.m1v = elbow.ShowM1();
	m_Outputs.m2v = elbow.ShowM2();
}

void CGivePosition::shoulderGive(float tar[], int num)
{
	for (int i = 0; i < num; i++)
	{
		MyCppPosition[PositionArraySize] = tar[i];
		if (PositionArraySize < 99)
		{
			PositionArraySize++;
		}
	}
	//TODO:如果给定超过数组大小，怎么解决
}

void CGivePosition::shoulder()
{
	if (PositionCount < PositionArraySize)	//没有走完已有坐标，则继续移动
	{

		if (m_Inputs.CanGivenPosition)		//可以给定坐标
		{
			m_Outputs.GivenPosition = MyCppPosition[PositionCount];	//将坐标传给plc
			m_Outputs.IsGivenPositon = TRUE;						//c++给定了坐标
		}
	}


	if ((m_Outputs.IsGivenPositon) && (MyCppPosition[PositionCount] == m_Inputs.NextPosition))
		//当NextPosition已经记录了给定坐标时，认为可以继续给定，将IsGivenPositon设为假
	{
		m_Outputs.IsGivenPositon = FALSE;	//上一次给定坐标已被PLC记录，认为c++未给定下一个坐标，可以继续给定
		++PositionCount;					//将c++坐标移动到下一个
	}
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CGivePosition::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CGivePosition::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}